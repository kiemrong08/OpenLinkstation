InitVal() {
	BUFFALO_KERNEL=0
	DEB_ARCH=armel
	ARRAY=0 # condition intended to be so complex due to fit various cases: 1st run / 2nd run in chroot w/ or w/o RAID
	[ -e /proc/mdstat ] && [ `wc -l /proc/mdstat | awk '{print $1}'` -gt 2 ] && ARRAY=1

	if [ $STAGE -eq 0 -a -e /proc/buffalo/firmware ]; then
		MACHINE_ID=$(grep PRODUCTNAME /proc/buffalo/firmware|cut -d= -f2|cut -d\( -f1)
		case "$MACHINE_ID" in
		"LS-VL" | "LS-QVL" | "LS-WSXL" | "LS-WVL" | "LS-WXL")
			MACHINE_ID="Buffalo Linkstation ${MACHINE_ID}"
			DEB_KERNEL="linux-image-kirkwood"
			;;
		"LS410D" | "LS420D" | "LS410DX" | "LS421D" | "LS210D" | "LS220D" | "LS220DB")
			DEB_ARCH=armhf
			MACHINE_ID="Buffalo Linkstation LS400/LS200"
			#DEB_KERNEL="linux-image-armmp"
			BUFFALO_KERNEL=1
			;;
		*)
			MACHINE_ID=""
			BUFFALO_KERNEL=1
			;;
		esac
	elif [ $STAGE -eq 0 ]; then
		MACHINE_ID=$(dmesg|grep "Machine model"|cut -d: -f2|sed -e 's/^[[:space:]]*//')
		DEB_KERNEL=$(dpkg -l |grep linux-image|tail -n1|cut -d" " -f3)
	elif [ $STAGE -eq 1 -a -e /etc/flash-kernel/machine ]; then
		MACHINE_ID=$(head -n1 /etc/flash-kernel/machine)
		DEB_KERNEL=$(head -n1 /etc/flash-kernel/kernel-image)
	elif [ $STAGE -eq 2 -a -e /etc/flash-kernel/machine ]; then
		MACHINE_ID=$(head -n1 /etc/flash-kernel/machine)
	elif [ $STAGE -eq 1 -o $STAGE -eq 2 ]; then
		BUFFALO_KERNEL=1
	elif [ ! $FORCE_BUFFALO_KERNEL -eq 1 ]; then
		echo Unexpected situation ... case 0
		exit 1
	fi
	if [ $FORCE_BUFFALO_KERNEL -eq 1 ]; then
		MACHINE_ID=""
		BUFFALO_KERNEL=1
	fi

	DEB_EXCLUDE=aptitude,tasksel,tasksel-data,vim-tiny
	DEB_INCLUDE=whiptail
	DEB_ADD="ssh vim-nox locales screen less hddtemp smartmontools rsync file mtr-tiny rsyslog ntpdate"
	DEB_DEL=""

	# package detail can be found on: https://packages.debian.org/squeeze/all/debootstrap/download
	if [ "x$DEBOOTSTRAP" = "xdebootstrap" ]; then
		DEBOOTSTRAP_PATH=/pool/main/d/debootstrap
		[ $DISTRO = "wheezy" ] && DEBOOTSTRAP_DEB=debootstrap_1.0.48+deb7u4_all.deb
		[ $DISTRO = "jessie" ] && DEBOOTSTRAP_DEB="debootstrap_1.0.64~bpo70+1_all.deb"
		DEBOOTSTRAP_OPT=
		DPKG_DEBOOTSTRAP_OPT=
	else
		DEBOOTSTRAP_PATH=/pool/main/c/cdebootstrap
		[ $DISTRO = "wheezy" ] && DEBOOTSTRAP_DEB=cdebootstrap-static_0.5.9_armel.deb
		DEBOOTSTRAP_OPT="--flavour=minimal --allow-unauthenticated"
		DPKG_DEBOOTSTRAP_OPT="--force-architecture --force-depends"
		DEB_ADD="$DEB_ADD netbase ifupdown net-tools isc-dhcp-client wget udev apt-utils cron iptables logrotate"
		DEB_DEL="$DEB_DEL cdebootstrap-helper-rc.d"
	fi

	if [ $DISTRO = "wheezy" ]; then
		DEB_INCLUDE=${DEB_INCLUDE},u-boot-tools
		DEB_EXCLUDE=aptitude-common
		[ $BUFFALO_KERNEL -eq 0 ] && DEB_BPO="initramfs-tools linux-image-kirkwood"
		#DEB_BPO="initramfs-tools linux-image-3.16-0.bpo.3-kirkwood"
		#APT_OPT="-o Acquire::Check-Valid-Until=false"
	elif [ $DISTRO = "jessie" ]; then
		DEB_ADD="$DEB_ADD u-boot-tools"
		if [ $SYSTEMD -eq 0 ]; then
			DEB_ADD="$DEB_ADD sysvinit-core"
			DEB_DEL="$DEB_DEL systemd-sysv systemd"
		fi
	fi

	SWAP_DEV=/dev/null
	BOOT_DEV=/dev/md0
	[ $ARRAY -eq 0 ] && BOOT_DEV=/dev/sda1
	if [ $STAGE -eq 0 ]; then
		if [ $ARRAY -eq 0 ]; then
			if [ -d /mnt/disk1 -o -d /mnt/disk2 ]; then
				TARGET=/mnt/disk1/rootfs
				[ -d /mnt/disk2 ] && TARGET=/mnt/disk2/rootfs
				TARGET_DEV=/dev/sda6
			fi
			MNT_DEV=/dev/sda2
		else
			if [ -e /dev/md2 ]; then
				TARGET_DEV=/dev/md2
			elif [ -e /dev/md21 ]; then
				TARGET_DEV=/dev/md21
			elif [ -e /dev/md22 ]; then
				TARGET_DEV=/dev/md22
			fi
			MNT_DEV=/dev/md1
			if [ -d /mnt/array1 -o -d /mnt/array2 ]; then
				TARGET=/mnt/array1/rootfs
				[ -d /mnt/array2 ] && TARGET=/mnt/array2/rootfs
			elif [ -d /mnt/disk1 -o -d /mnt/disk2 ]; then
				TARGET=/mnt/disk1/rootfs
				[ -d /mnt/disk2 ] && TARGET=/mnt/disk2/rootfs
			else
				MNT_DEV=/dev/md2
			fi
		fi
		if [ -z "$TARGET" ]; then
			TARGET=/mnt/rootfs
			TARGET_DEV=$(GetDev "/mnt")
		fi
	elif [ $STAGE -eq 1 ]; then
		TARGET_DEV=$(head -n1 /target_dev)
	elif [ $STAGE -eq 2 ]; then
		TARGET=/mnt
		TARGET_DEV=$(GetDev $TARGET)
		MNT_DEV=$(GetDev /)
		[ -z "$TARGET_DEV" ] && echo Please mount target rootfs device on /mnt. && exit 1
	else
		echo Unexpected situation ... case 1
		exit 1
	fi
	noUUID=0
	[ $BUFFALO_KERNEL -gt 0 -o ! -d /dev/disk/by-uuid -o $STAGE -eq 2 ] && noUUID=1
	[ -z "$RUN_ROOT" ] && RUN_ROOT=$TARGET_DEV
	[ -z "$RUN_BOOT" ] && RUN_BOOT=$BOOT_DEV
	echo "STAGE=$STAGE ARRAY=$ARRAY TARGET=$TARGET TARGET_DEVICE=$TARGET_DEV BOOT_DEVICE=$BOOT_DEV rootfs=$RUN_ROOT bootfs=$RUN_BOOT"
	echo "BUFFALO_KERNEL=$BUFFALO_KERNEL MACHINE_ID='$MACHINE_ID' DEB_KERNEL=$DEB_KERNEL"
}

GetUUID() {
	echo $(blkid -o value -s UUID $1)
}

GetFS() {
	echo $(blkid -o value -s TYPE $1)
}

GetDev() {
	dev=$(readlink -f $1)
	line=$(cut -d' ' -f2 /proc/mounts|grep -n "^$dev\$"|tail -n1|cut -d: -f1)
	[ -n "$line" ] && echo $(sed -n -e ${line}p /proc/mounts|cut -d' ' -f1)
}

# Create file /etc/fstab
# Argument:
#	$1: use dev name (1) or UUID (0)
CreateFstab() {
	noUUID=$1
	[ -z "$1" ] && noUUID=0
	if [ $noUUID -eq 1 ]; then
		cat << EOT > $TARGET/etc/fstab
# dev_file	mount	type	options		dump pass
proc		/proc	proc	defaults	0    0
#$SWAP_DEV	none	swap	sw		0    0
$RUN_ROOT	/	$(GetFS $TARGET_DEV)	relatime	0    1
$RUN_BOOT	/boot	$(GetFS $BOOT_DEV)	ro,relatime,errors=continue 0    2
#$MNT_DEV	/mnt	$(GetFS $MNT_DEV)	relatime	0    2
EOT
	else
		cat << EOT > $TARGET/etc/fstab
# dev_file					mount	type	options		dump pass
proc						/proc	proc	defaults	0    0
#$SWAP_DEV					none	swap	sw		0    0
UUID=$(GetUUID $TARGET_DEV)	/	$(GetFS $TARGET_DEV)	relatime	0    1
UUID=$(GetUUID $BOOT_DEV)	/boot	$(GetFS $BOOT_DEV)	ro,relatime,errors=continue 0    2
#UUID=$(GetUUID $MNT_DEV)	/mnt	$(GetFS $MNT_DEV)	relatime	0    2
EOT
	fi
}

# Create file initrd.buffalo_debian and symbol link it to /boot/initrd.buffalo
# Argument:
#	$1: boot device (default: 0x802, means /dev/sda2)
#	$2: initrd filename (default: /boot/initrd.uimg_debian)
#	$3: whether to make symbolic link as /boot/initrd.buffalo (default: 0)
CreateInitrd() {
	ROOTDEV=$1
	INITRD_FILE=$2
	INITRD_LINK=$3
	[ -z "$1" ] && ROOTDEV=/dev/sda2
	[ -z "$2" ] && INITRD_FILE=/boot/initrd.uimg_debian
	[ -z "$3" ] && INITRD_LINK=0
	ROOTDEV_ID=0x$(stat -c '%t' $ROOTDEV)$(printf %02x 0x$(stat -c '%T' $ROOTDEV))
	MDROOT=0
	ROOTNUM=`printf %d $ROOTDEV_ID`
	[ $ROOTNUM -gt 2303 ] && MDROOT=1
	echo "CreateInitrd ROOTDEV=$ROOTDEV INITRD_FILE=$INITRD_FILE MDROOT=$MDROOT INITRD_LINK=$INITRD_LINK RootDevID=$ROOTDEV_ID (RefID: 0x806:sda6; 0x822:sdb6; 0x901:md1; 0x902:md2; 0x915:md21)"
	cd /tmp
		#gunzip initrd.gz
		#mkdir INITRD
		#mount -t ext2 -o ro,loop initrd INITRD
		#rsync -a INITRD/lib/modules/* /lib/modules/
		#umount INITRD
		#rm initrd*
	dd if=/dev/zero of=initrd bs=1k count=0 seek=3K &> /dev/null
	mke2fs -F -m 0 -b 1024 initrd > /dev/null
	tune2fs -c0 -i0 initrd > /dev/null
	mkdir INITRD
	mount -o loop initrd INITRD
	mkdir -p INITRD/{bin,lib,sbin,proc}
	echo cp -aL --parents /bin/busybox /sbin/pivot_root INITRD/; cp -aL --parents /bin/busybox /sbin/pivot_root INITRD/
	if [ $MDROOT -ne 0 ]; then
		mkdir -p INITRD/{dev,etc/mdadm}
		(cd INITRD/dev/; echo "MAKEDEV sd{a,b,c,d} md"; MAKEDEV sd{a,b,c,d} md)
		#echo cp -a /dev/sd{a,b,c,d}* /dev/md* INITRD/dev/; cp -a /dev/sd{a,b,c,d}* /dev/md* INITRD/dev/
		rm -rf INITRD/dev/md/
		echo cp -aL --parents /sbin/mdadm INITRD/; cp -aL --parents /sbin/mdadm INITRD/
	fi
	libs2install=$( ldd INITRD/*bin/* | grep -v "^INITRD/" | sed -e 's/.*=> *//'  -e 's/ *(.*//' | sort -u )
	echo cp -aL --parents $libs2install INITRD/; cp -aL --parents $libs2install INITRD/
	(cd INITRD/bin; ln -s busybox sh)
	if [ $MDROOT -eq 0 ]; then
		cat << EOT > INITRD/linuxrc
#!/bin/sh
mount -t proc none /proc
			dmesg -n 8
			mkdir -p /sys/kernel/config
			mount -t configfs none /sys/kernel/config
			mkdir /sys/kernel/config/netconsole/target0 /sys/kernel/config/netconsole/target1
			cd /sys/kernel/config/netconsole/target0
			echo eth0 > dev_name
			echo 192.168.11.150 > local_ip
			echo 192.168.11.1 > remote_ip
			echo 1 > enabled
			cd /sys/kernel/config/netconsole/target1
			echo eth1 > dev_name
			echo 192.168.11.151 > local_ip
			echo 192.168.11.1 > remote_ip
			echo 1 > enabled
			cd /
			umount /sys/kernel/config
echo $ROOTDEV_ID > /proc/sys/kernel/real-root-dev
umount /proc
EOT
	else
		cat << EOT > INITRD/linuxrc
#!/bin/sh
mount -t proc none /proc
echo 'DEVICE /dev/sd??*' > /etc/mdadm/mdadm.conf
mdadm -Eb /dev/sd[abcd]* >> /etc/mdadm/mdadm.conf
mdadm -As --force
			TS=\`date +%Y%m%d-%H%M%S\`
			mkdir /mnt; mount /dev/md0 /mnt; mkdir -p /mnt/bootlog; cd /mnt/bootlog
			dmesg>dmesg_\${TS}.log; cat /proc/mdstat>fs_\${TS}.log; df>>fs_\${TS}.log; mount>>fs_\${TS}.log
			echo ROOTDEV=$ROOTDEV ROOTDEV_ID=$ROOTDEV_ID >> fs_\${TS}.log
			cd -; umount /mnt;rmdir /mnt

			dmesg -n 8
			mkdir -p /sys/kernel/config
			mount -t configfs none /sys/kernel/config
			mkdir /sys/kernel/config/netconsole/target0 /sys/kernel/config/netconsole/target1
			cd /sys/kernel/config/netconsole/target0
			echo eth0 > dev_name
			echo 192.168.11.150 > local_ip
			echo 192.168.11.1 > remote_ip
			echo 1 > enabled
			cd /sys/kernel/config/netconsole/target1
			echo eth1 > dev_name
			echo 192.168.11.151 > local_ip
			echo 192.168.11.1 > remote_ip
			echo 1 > enabled
			cd /
			umount /sys/kernel/config
echo $ROOTDEV_ID > /proc/sys/kernel/real-root-dev
umount /proc
EOT
	fi
	chmod 755 INITRD/linuxrc
#			mkdir INITRD_DIR
#			echo rsync -a INITRD/ INITRD_DIR/
#			rsync -a INITRD/ INITRD_DIR/
	umount INITRD
	rmdir INITRD
	echo gzip -9 initrd
	gzip -9 initrd
	cd -
	echo mkimage -A arm -O linux -T ramdisk -C gzip -a 0x0 -e 0x0 -n initrd -d /tmp/initrd.gz $INITRD_FILE
	mkimage -A arm -O linux -T ramdisk -C gzip -a 0x0 -e 0x0 -n initrd -d /tmp/initrd.gz $INITRD_FILE
	rm /tmp/initrd.gz
	[ $INITRD_LINK -eq 0 ] && return
	if [ ! -e initrd.buffalo -o -h initrd.buffalo ]; then
		localname=`basename $INITRD_FILE`
		(cd /boot/
		echo ln -sf $localname initrd.buffalo
		ln -sf $localname initrd.buffalo
		echo ls -l /boot/initrd.buffalo\*
		ls -l /boot/initrd.buffalo*)
	fi
}

# Create hook script for initramfs
# Argument:
#	$1: scripts root path
#	$2: target rootfs path
#	$3: boot device on runtime
#	$4: boot device when boot the new created system
#	$5: whether NOT to use UUID in initramfs
CreateInitramfsHook() {
	script_root=$1
	rootfs=$2
	fstype=$(GetFS $3)
	uuid=$(GetUUID $3)
	rootdev=$4
	no_uuid=$5
	if [ -f $script_root/scripts/initramfs-tools_hooks_set_root ]; then
		cp -a $script_root/scripts/initramfs-tools_hooks_set_root $rootfs/etc/initramfs-tools/hooks/set_root
		if [ $no_uuid -gt 0 ]; then
			cat << EOT >> $rootfs/etc/initramfs-tools/hooks/set_root
#echo "ROOT=/dev/disk/by-uuid/$uuid" >> \$DESTDIR/conf/param.conf
echo "ROOT=$rootdev" >> \$DESTDIR/conf/param.conf
EOT
		else
			cat << EOT >> $rootfs/etc/initramfs-tools/hooks/set_root
#echo "ROOT=$rootdev" >> \$DESTDIR/conf/param.conf
echo "ROOT=/dev/disk/by-uuid/$uuid" >> \$DESTDIR/conf/param.conf
EOT
		fi
		[ $fstype = "xfs" -o $fstype = "jfs" -o $fstype = "ext4" ] && echo "#echo \"ROOTFLAGS='-o discard'\" >> \$DESTDIR/conf/param.conf" >> $rootfs/etc/initramfs-tools/hooks/set_root
		[ $fstype = "btrfs" ] && echo "#echo \"ROOTFLAGS='-o ssd'\" >> \$DESTDIR/conf/param.conf" >> $rootfs/etc/initramfs-tools/hooks/set_root
		echo "exit 0" >> $rootfs/etc/initramfs-tools/hooks/set_root
	fi
}

# Create modules list for initramfs
# Argument:
#	$1: target rootfs path
#	$2: boot device on runtime
#	$3: whether is RAID1
CreateInitramfsModule() {
	rootfs=$1
	fstype=$(GetFS $2)
	array=$3
	cat << EOT >> $rootfs/etc/initramfs-tools/modules
mv643xx_eth
netconsole netconsole=@192.168.11.150/,6666@192.168.11.1/
mvmdio
sata_mv
sd_mod
$fstype
EOT
	[ $array -eq 1 ] && echo raid1 >> $rootfs/etc/initramfs-tools/modules
	[ "x$fstype" = "xbtrfs" ] && echo crc32c >> $rootfs/etc/initramfs-tools/modules
}

# Prepare to chroot
# Argument:
#	$1: target rootfs path
#	$2: boot device
ChrootPrepare() {
	root=$1
	boot_dev=$2
	mount --bind /dev $root/dev
	chroot $root mount -t proc proc /proc
	chroot $root mount -t sysfs sysfs /sys
	chroot $root mount -t devpts devpts /dev/pts
	chroot $root mount $boot_dev /boot || (chroot $root mount -o ro $boot_dev /boot; chroot $root mount -o remount,rw /boot)
}

# Finish a chroot
# Argument:
#	$1: target rootfs path
ChrootEnd() {
	root=$1
	chroot $root umount /boot
	chroot $root umount /dev/pts
	chroot $root umount /sys
	chroot $root umount /proc
	chroot $root umount /dev
}
